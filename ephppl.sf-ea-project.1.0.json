{
  "manifests": {
    "ephppl/sf-ea-project": {
      "manifest": {
        "copy-from-recipe": {
          "src/": "%SRC_DIR%/",
          "config/": "%CONFIG_DIR%/"
        }
      },

      "files": {
        "src/Controller/Admin/DashboardController.php": {
          "contents": [
            "<?php",
            "",
            "namespace App\\Controller\\Admin;",
            "",
            "use App\\Entity\\User;",
            "use EasyCorp\\Bundle\\EasyAdminBundle\\Config\\Dashboard;",
            "use EasyCorp\\Bundle\\EasyAdminBundle\\Config\\MenuItem;",
            "use EasyCorp\\Bundle\\EasyAdminBundle\\Controller\\AbstractDashboardController;",
            "use EasyCorp\\Bundle\\EasyAdminBundle\\Router\\AdminUrlGenerator;",
            "use Symfony\\Component\\HttpFoundation\\Response;",
            "use Symfony\\Component\\Routing\\Attribute\\Route;",
            "",
            "class DashboardController extends AbstractDashboardController",
            "{",
            "    #[Route('/admin', name: 'admin')]",
            "    public function index(): Response",
            "    {",
            "        $adminUrlGenerator = $this->container->get(AdminUrlGenerator::class);",
            "        return $this->redirect($adminUrlGenerator->setController(UserCrudController::class)->generateUrl());",
            "    }",
            "",
            "    public function configureMenuItems(): iterable",
            "    {",
            "        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');",
            "         yield MenuItem::linkToCrud('Users', 'fas fa-user', User::class);",
            "    }",
            "}"
          ],
          "executable": false
        },
        "src/Controller/Admin/UserCrudController.php": {
          "contents": [
            "<?php",
            "",
            "namespace App\\Controller\\Admin;",
            "",
            "use App\\Entity\\User;",
            "use App\\Form\\UserSitesType;",
            "use Doctrine\\ORM\\EntityManagerInterface;",
            "use EasyCorp\\Bundle\\EasyAdminBundle\\Controller\\AbstractCrudController;",
            "use EasyCorp\\Bundle\\EasyAdminBundle\\Field\\ChoiceField;",
            "use EasyCorp\\Bundle\\EasyAdminBundle\\Field\\EmailField;",
            "use EasyCorp\\Bundle\\EasyAdminBundle\\Field\\TextField;",
            "use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;",
            "",
            "class UserCrudController extends AbstractCrudController",
            "{",
            "    public function __construct(private readonly UserPasswordHasherInterface $passwordHasher)",
            "    {}",
            "    public static function getEntityFqcn(): string",
            "    {",
            "        return User::class;",
            "    }",
            "",
            "    public function configureFields(string $pageName): iterable",
            "    {",
            "        return [",
            "            EmailField::new('email'),",
            "            ChoiceField::new('roles')->renderExpanded()->allowMultipleChoices()->setChoices(User::getRolesChoices()),",
            "            TextField::new('plainPassword')->hideOnDetail()->hideOnIndex(),",
            "        ];",
            "    }",
            "",
            "    /**",
            "     * @param User $entityInstance",
            "     */",
            "    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void",
            "    {",
            "        if ($entityInstance->getPlainPassword()) {",
            "            $password = $this->passwordHasher->hashPassword($entityInstance, $entityInstance->getPlainPassword());",
            "            $entityInstance->setPassword($password);",
            "        }",
            "        parent::persistEntity($entityManager, $entityInstance);",
            "    }",
            "",
            "    /**",
            "     * @param User $entityInstance",
            "     */",
            "    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void",
            "    {",
            "        if ($entityInstance->getPlainPassword()) {",
            "            $password = $this->passwordHasher->hashPassword($entityInstance, $entityInstance->getPlainPassword());",
            "            $entityInstance->setPassword($password);",
            "        }",
            "        parent::updateEntity($entityManager, $entityInstance);",
            "    }",
            "}"
          ],
          "executable": false
        },
        "src/Entity/User.php": {
          "contents": [
            "<?php",
            "",
            "namespace Entity;",
            "",
            "use App\\Repository\\UserRepository;",
            "use Doctrine\\ORM\\Mapping as ORM;",
            "use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;",
            "use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
            "",
            "#[ORM\\Entity(repositoryClass: UserRepository::class)]",
            "#[ORM\\Table(name: '`user`')]",
            "#[ORM\\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]",
            "class User implements UserInterface, PasswordAuthenticatedUserInterface",
            "{",
            "    #[ORM\\Id]",
            "    #[ORM\\GeneratedValue]",
            "    #[ORM\\Column]",
            "    private ?int $id = null;",
            "",
            "    #[ORM\\Column(length: 180)]",
            "    private ?string $email = null;",
            "",
            "    /**",
            "     * @var list<string> The user roles",
            "     */",
            "    #[ORM\\Column]",
            "    private array $roles = [];",
            "",
            "    /**",
            "     * @var string The hashed password",
            "     */",
            "    #[ORM\\Column]",
            "    private ?string $password = null;",
            "",
            "    private $plainPassword;",
            "",
            "    public static function getRolesChoices(): array",
            "    {",
            "        return [",
            "            'Super Administrator' => 'ROLE_SUPER_ADMIN',",
            "            'Administrator' => 'ROLE_ADMIN',",
            "            'User' => 'ROLE_USER',",
            "        ];",
            "    }",
            "",
            "    public function getId(): ?int",
            "    {",
            "        return $this->id;",
            "    }",
            "",
            "    public function getEmail(): ?string",
            "    {",
            "        return $this->email;",
            "    }",
            "",
            "    public function setEmail(string $email): static",
            "    {",
            "        $this->email = $email;",
            "",
            "        return $this;",
            "    }",
            "",
            "    /**",
            "     * A visual identifier that represents this user.",
            "     *",
            "     * @see UserInterface",
            "     */",
            "    public function getUserIdentifier(): string",
            "    {",
            "        return (string) $this->email;",
            "    }",
            "",
            "    /**",
            "     * @see UserInterface",
            "     *",
            "     * @return list<string>",
            "     */",
            "    public function getRoles(): array",
            "    {",
            "        $roles = $this->roles;",
            "        // guarantee every user at least has ROLE_USER",
            "        $roles[] = 'ROLE_USER';",
            "",
            "        return array_unique($roles);",
            "    }",
            "",
            "    /**",
            "     * @param list<string> $roles",
            "     */",
            "    public function setRoles(array $roles): static",
            "    {",
            "        $this->roles = $roles;",
            "",
            "        return $this;",
            "    }",
            "",
            "    /**",
            "     * @see PasswordAuthenticatedUserInterface",
            "     */",
            "    public function getPassword(): ?string",
            "    {",
            "        return $this->password;",
            "    }",
            "",
            "    public function setPassword(string $password): static",
            "    {",
            "        $this->password = $password;",
            "",
            "        return $this;",
            "    }",
            "",
            "    /**",
            "     * @see UserInterface",
            "     */",
            "    public function eraseCredentials(): void",
            "    {",
            "         $this->plainPassword = null;",
            "    }",
            "    public function getPlainPassword(): ?string",
            "    {",
            "        return $this->plainPassword;",
            "    }",
            "    public function setPlainPassword(?string $plainPassword): self",
            "    {",
            "        $this->plainPassword = $plainPassword;",
            "",
            "        return $this;",
            "    }",
            "}"
          ],
          "executable": false
        },
        "src/Repository/UserRepository.php": {
          "contents": [
            "<?php",
            "",
            "namespace Repository;",
            "",
            "use App\\Entity\\User;",
            "use Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;",
            "use Doctrine\\Persistence\\ManagerRegistry;",
            "use Symfony\\Component\\Security\\Core\\Exception\\UnsupportedUserException;",
            "use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;",
            "use Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface;",
            "",
            "/**",
            " * @extends ServiceEntityRepository<User>",
            " */",
            "class UserRepository extends ServiceEntityRepository implements PasswordUpgraderInterface",
            "{",
            "    public function __construct(ManagerRegistry $registry)",
            "    {",
            "        parent::__construct($registry, User::class);",
            "    }",
            "",
            "    /**",
            "     * Used to upgrade (rehash) the user's password automatically over time.",
            "     */",
            "    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void",
            "    {",
            "        if (!$user instanceof User) {",
            "            throw new UnsupportedUserException(sprintf('Instances of \"%s\" are not supported.', $user::class));",
            "        }",
            "",
            "        $user->setPassword($newHashedPassword);",
            "        $this->getEntityManager()->persist($user);",
            "        $this->getEntityManager()->flush();",
            "    }",
            "}"
          ],
          "executable": false
        },
        "cpnfig/packages/security_user.yaml": {
          "contents": [
            "security:",
            "    role_hierarchy:",
            "        ROLE_ADMIN:       [ROLE_USER]",
            "        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]",
            "    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords",
            "    password_hashers:",
            "        Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface: 'auto'",
            "    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider",
            "    providers:",
            "        # used to reload user from session & other features (e.g. switch_user)",
            "        app_user_provider:",
            "            entity:",
            "                class: App\\Entity\\User",
            "                property: email",
            "    firewalls:",
            "        dev:",
            "            pattern: ^/(_(profiler|wdt)|css|images|js)/",
            "            security: false",
            "        main:",
            "            lazy: true",
            "            provider: app_user_provider",
            "            form_login:",
            "                login_path: app_login",
            "                check_path: app_login",
            "                enable_csrf: true",
            "            logout:",
            "                path: app_logout",
            "",
            "            # activate different ways to authenticate",
            "            # https://symfony.com/doc/current/security.html#the-firewall",
            "",
            "            # https://symfony.com/doc/current/security/impersonating_user.html",
            "            # switch_user: true",
            "",
            "    # Easy way to control access for large sections of your site",
            "    # Note: Only the *first* access control that matches will be used",
            "    access_control:",
            "        - { path: ^/admin, roles: ROLE_ADMIN }",
            "        # - { path: ^/profile, roles: ROLE_USER }",
            "",
            "when@test:",
            "    security:",
            "        password_hashers:",
            "            # By default, password hashers are resource intensive and take time. This is",
            "            # important to generate secure password hashes. In tests however, secure hashes",
            "            # are not important, waste resources and increase test times. The following",
            "            # reduces the work factor to the lowest possible values.",
            "            Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface:",
            "                algorithm: auto",
            "                cost: 4 # Lowest possible value for bcrypt",
            "                time_cost: 3 # Lowest possible value for argon",
            "                memory_cost: 10 # Lowest possible value for argon"
          ],
          "executable": false
        }
      },
      "ref": "7405f3af1312d1f9121afed4dddef636c6c7ff03"
    }
  }
}